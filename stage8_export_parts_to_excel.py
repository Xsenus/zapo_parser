# stage8_export_parts_to_excel.py

import json
import pandas as pd
from tqdm import tqdm
from datetime import datetime
import os

STAGE6_FILE = "stage6_versions_detailed.json"
STAGE7_FILE = "stage7_parts_detailed.json"
OUTPUT_FILE = "stage8_parts_export.xlsx"
LOGS_DIR = "zapo_logs"

def load_data(filepath):
    with open(filepath, "r", encoding="utf-8") as f:
        return json.load(f)

def build_parts_lookup(parts_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è {modification_url: parts[]}"""
    lookup = {}
    for car in parts_data:
        for mod in car.get("modifications", []):
            mod_url = mod.get("modification_url")
            if mod_url:
                lookup[mod_url] = mod.get("parts", [])
    return lookup

def flatten_full_data(full_data, parts_lookup):
    rows = []
    for car in tqdm(full_data, desc="üöó –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ"):
        brand = car.get("brand", "")
        brand_url = car.get("brand_url", "")
        model = car.get("model", "")
        version = car.get("version", "")
        version_url = car.get("version_url", "")
        image_car = car.get("image", "")
        modifications = car.get("modifications", [])

        # –£—Ä–æ–≤–µ–Ω—å 1 ‚Äî —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–∞
        rows.append({
            "–ú–∞—Ä–∫–∞": brand,
            "–ì—Ä—É–ø–ø–∞": "",
            "–ú–æ–¥–µ–ª—å": "",
            "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è": "",
            "–¢–æ–≤–∞—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞": "",
            "–°—Å—ã–ª–∫–∞": brand_url,
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": "",
            "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä": "",
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è": image_car,
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": "",
        })

        # –£—Ä–æ–≤–µ–Ω—å 2 ‚Äî –º–∞—Ä–∫–∞ + –≥—Ä—É–ø–ø–∞
        group_link = f"{brand_url}#group_{model}"
        rows.append({
            "–ú–∞—Ä–∫–∞": brand,
            "–ì—Ä—É–ø–ø–∞": model,
            "–ú–æ–¥–µ–ª—å": "",
            "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è": "",
            "–¢–æ–≤–∞—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞": "",
            "–°—Å—ã–ª–∫–∞": group_link,
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": "",
            "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä": "",
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è": image_car,
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": "",
        })

        # –£—Ä–æ–≤–µ–Ω—å 3 ‚Äî –º–∞—Ä–∫–∞ + –≥—Ä—É–ø–ø–∞ + –º–æ–¥–µ–ª—å
        rows.append({
            "–ú–∞—Ä–∫–∞": brand,
            "–ì—Ä—É–ø–ø–∞": model,
            "–ú–æ–¥–µ–ª—å": version,
            "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è": "",
            "–¢–æ–≤–∞—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞": "",
            "–°—Å—ã–ª–∫–∞": version_url,
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": "",
            "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä": "",
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è": image_car,
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": "",
        })

        for mod in modifications:
            mod_name = mod.get("modification", "")
            mod_url = mod.get("modification_url", "")
            parts = parts_lookup.get(mod_url, [])

            if parts:
                for part in parts:
                    rows.append({
                        "–ú–∞—Ä–∫–∞": brand,
                        "–ì—Ä—É–ø–ø–∞": model,
                        "–ú–æ–¥–µ–ª—å": version,
                        "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è": mod_name,
                        "–¢–æ–≤–∞—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞": part.get("group", ""),
                        "–°—Å—ã–ª–∫–∞": mod_url,
                        "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": part.get("name", ""),
                        "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä": part.get("search_url", ""),
                        "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è": image_car,
                        "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": part.get("image_url", ""),
                    })
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                rows.append({
                    "–ú–∞—Ä–∫–∞": brand,
                    "–ì—Ä—É–ø–ø–∞": model,
                    "–ú–æ–¥–µ–ª—å": version,
                    "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è": mod_name,
                    "–¢–æ–≤–∞—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞": "",
                    "–°—Å—ã–ª–∫–∞": mod_url,
                    "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": "",
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä": "",
                    "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è": image_car,
                    "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": "",
                })
    return rows

def export_to_excel(rows, output_path):
    df = pd.DataFrame(rows)
    df.sort_values(by=["–ú–∞—Ä–∫–∞", "–ì—Ä—É–ø–ø–∞", "–ú–æ–¥–µ–ª—å", "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è"], inplace=True)
    df.to_excel(output_path, index=False)
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path} ({len(df)} —Å—Ç—Ä–æ–∫)")
    return df

def write_log(df, output_dir):
    os.makedirs(output_dir, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    log_file = os.path.join(output_dir, f"parts_export_log_{timestamp}.txt")

    brands = df["–ú–∞—Ä–∫–∞"].nunique()
    models = df["–ì—Ä—É–ø–ø–∞"].nunique()
    mods = df["–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è"].nunique()

    with open(log_file, "w", encoding="utf-8") as f:
        f.write(f"[{timestamp}]\n")
        f.write(f"–§–∞–π–ª: {OUTPUT_FILE}\n")
        f.write(f"–°—Ç—Ä–æ–∫: {len(df)}\n")
        f.write(f"–ú–∞—Ä–æ–∫: {brands}, –ú–æ–¥–µ–ª–µ–π: {models}, –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: {mods}\n")

    print(f"üìù –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω: {log_file}")

def main():
    full_data = load_data(STAGE6_FILE)
    parts_data = load_data(STAGE7_FILE)
    parts_lookup = build_parts_lookup(parts_data)
    rows = flatten_full_data(full_data, parts_lookup)
    df = export_to_excel(rows, OUTPUT_FILE)
    write_log(df, LOGS_DIR)

if __name__ == "__main__":
    main()
